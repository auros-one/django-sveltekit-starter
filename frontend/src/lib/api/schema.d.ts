/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/accounts/change-email/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Site-aware email change view.
		 *     Updates both public email and internal username. */
		post: operations['accounts_change_email_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/login/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Check the credentials and return the REST Token
		 *     if the credentials are valid and authenticated.
		 *     Calls Django Auth login method to register User ID
		 *     in Django session framework
		 *
		 *     Accept the following POST parameters: username, password
		 *     Return the REST Framework Token Object's key. */
		post: operations['accounts_login_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/logout/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Calls Django logout method and delete the Token object
		 *     assigned to the current User object.
		 *
		 *     Accepts/Returns nothing. */
		post: operations['accounts_logout_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/password/change/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Calls Django Auth SetPasswordForm save method.
		 *
		 *     Accepts the following POST parameters: new_password1, new_password2
		 *     Returns the success/fail message. */
		post: operations['accounts_password_change_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/password/reset/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Calls Django Auth PasswordResetForm save method.
		 *
		 *     Accepts the following POST parameters: email
		 *     Returns the success/fail message. */
		post: operations['accounts_password_reset_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/password/reset/confirm/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Password reset e-mail link is confirmed, therefore
		 *     this resets the user's password.
		 *
		 *     Accepts the following POST parameters: token, uid,
		 *         new_password1, new_password2
		 *     Returns the success/fail message. */
		post: operations['accounts_password_reset_confirm_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/resend-email/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Resends another email to an unverified email.
		 *
		 *     Accepts the following POST parameter: email. */
		post: operations['accounts_resend_email_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/signup/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Site-aware user registration view. */
		post: operations['accounts_signup_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/token/refresh/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Takes a refresh type JSON web token and returns an access type JSON web
		 *     token if the refresh token is valid. */
		post: operations['accounts_token_refresh_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/token/verify/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Takes a token and indicates if it is valid.  This view provides no
		 *     information about a token's fitness for a particular use. */
		post: operations['accounts_token_verify_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/accounts/user/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Reads and updates UserModel fields
		 *     Accepts GET, PUT, PATCH methods.
		 *
		 *     Default accepted fields: username, first_name, last_name
		 *     Default display fields: pk, username, email, first_name, last_name
		 *     Read-only fields: pk, email
		 *
		 *     Returns UserModel fields. */
		get: operations['accounts_user_retrieve'];
		/** @description Reads and updates UserModel fields
		 *     Accepts GET, PUT, PATCH methods.
		 *
		 *     Default accepted fields: username, first_name, last_name
		 *     Default display fields: pk, username, email, first_name, last_name
		 *     Read-only fields: pk, email
		 *
		 *     Returns UserModel fields. */
		put: operations['accounts_user_update'];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** @description Reads and updates UserModel fields
		 *     Accepts GET, PUT, PATCH methods.
		 *
		 *     Default accepted fields: username, first_name, last_name
		 *     Default display fields: pk, username, email, first_name, last_name
		 *     Read-only fields: pk, email
		 *
		 *     Returns UserModel fields. */
		patch: operations['accounts_user_partial_update'];
		trace?: never;
	};
	'/accounts/verify-email/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** @description Verifies the email associated with the provided key.
		 *
		 *     Accepts the following POST parameter: key. */
		post: operations['accounts_verify_email_create'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/authcheck/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description A private Healthcheck endpoint used for testing API key permissions. */
		get: operations['Auth Check'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/healthcheck/': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Healthcheck endpoint. */
		get: operations['Health Check'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @description Serializer for changing user email address.
		 *     Updates both the public email and internal username. */
		EmailChange: {
			/** Format: email */
			new_email: string;
			password: string;
		};
		/** @description Serializer for changing user email address.
		 *     Updates both the public email and internal username. */
		EmailChangeRequest: {
			/** Format: email */
			new_email: string;
			password: string;
		};
		/** @description Serializer for JWT authentication. */
		JWT: {
			access: string;
			refresh: string;
			user: components['schemas']['UserDetails'];
		};
		/** @description Site-aware login serializer that allows email-based login while using
		 *     site-scoped username internally.
		 *
		 *     Users still login with email + password, but authentication happens with
		 *     the internal username format: "site_id-email" */
		LoginRequest: {
			/** Format: email */
			email: string;
			password: string;
		};
		PasswordChangeRequest: {
			old_password: string;
			new_password1: string;
			new_password2: string;
		};
		/** @description Serializer for confirming a password reset attempt. */
		PasswordResetConfirmRequest: {
			new_password1: string;
			new_password2: string;
			uid: string;
			token: string;
		};
		/** @description Site-aware password reset serializer. */
		PasswordResetRequest: {
			/** Format: email */
			email: string;
		};
		/** @description User serializer that only exposes public fields.
		 *     Username is internal and never exposed to frontend. */
		PatchedUserDetailsRequest: {
			name?: string | null;
		};
		/** @description Site-aware registration serializer that creates users with proper site context. */
		Register: {
			username?: string;
			/** Format: email */
			email: string;
			name?: string;
		};
		/** @description Site-aware registration serializer that creates users with proper site context. */
		RegisterRequest: {
			username?: string;
			/** Format: email */
			email: string;
			password1: string;
			password2: string;
			name?: string;
		};
		ResendEmailVerificationRequest: {
			/** Format: email */
			email: string;
		};
		RestAuthDetail: {
			readonly detail: string;
		};
		TokenRefresh: {
			readonly access: string;
		};
		TokenRefreshRequest: {
			refresh: string;
		};
		TokenVerifyRequest: {
			token: string;
		};
		/** @description User serializer that only exposes public fields.
		 *     Username is internal and never exposed to frontend. */
		UserDetails: {
			/** Email address */
			readonly email: string;
			name?: string | null;
			/**
			 * Superuser status
			 * @description Designates that this user has all permissions without explicitly assigning them.
			 */
			readonly is_superuser: boolean;
		};
		/** @description User serializer that only exposes public fields.
		 *     Username is internal and never exposed to frontend. */
		UserDetailsRequest: {
			name?: string | null;
		};
		VerifyEmailRequest: {
			key: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	accounts_change_email_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['EmailChangeRequest'];
				'application/x-www-form-urlencoded': components['schemas']['EmailChangeRequest'];
				'multipart/form-data': components['schemas']['EmailChangeRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['EmailChange'];
				};
			};
		};
	};
	accounts_login_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['LoginRequest'];
				'application/x-www-form-urlencoded': components['schemas']['LoginRequest'];
				'multipart/form-data': components['schemas']['LoginRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['JWT'];
				};
			};
		};
	};
	accounts_logout_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RestAuthDetail'];
				};
			};
		};
	};
	accounts_password_change_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PasswordChangeRequest'];
				'application/x-www-form-urlencoded': components['schemas']['PasswordChangeRequest'];
				'multipart/form-data': components['schemas']['PasswordChangeRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RestAuthDetail'];
				};
			};
		};
	};
	accounts_password_reset_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PasswordResetRequest'];
				'application/x-www-form-urlencoded': components['schemas']['PasswordResetRequest'];
				'multipart/form-data': components['schemas']['PasswordResetRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RestAuthDetail'];
				};
			};
		};
	};
	accounts_password_reset_confirm_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['PasswordResetConfirmRequest'];
				'application/x-www-form-urlencoded': components['schemas']['PasswordResetConfirmRequest'];
				'multipart/form-data': components['schemas']['PasswordResetConfirmRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RestAuthDetail'];
				};
			};
		};
	};
	accounts_resend_email_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['ResendEmailVerificationRequest'];
				'application/x-www-form-urlencoded': components['schemas']['ResendEmailVerificationRequest'];
				'multipart/form-data': components['schemas']['ResendEmailVerificationRequest'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RestAuthDetail'];
				};
			};
		};
	};
	accounts_signup_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['RegisterRequest'];
				'application/x-www-form-urlencoded': components['schemas']['RegisterRequest'];
				'multipart/form-data': components['schemas']['RegisterRequest'];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Register'];
				};
			};
		};
	};
	accounts_token_refresh_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['TokenRefreshRequest'];
				'application/x-www-form-urlencoded': components['schemas']['TokenRefreshRequest'];
				'multipart/form-data': components['schemas']['TokenRefreshRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['TokenRefresh'];
				};
			};
		};
	};
	accounts_token_verify_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['TokenVerifyRequest'];
				'application/x-www-form-urlencoded': components['schemas']['TokenVerifyRequest'];
				'multipart/form-data': components['schemas']['TokenVerifyRequest'];
			};
		};
		responses: {
			/** @description No response body */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	accounts_user_retrieve: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDetails'];
				};
			};
		};
	};
	accounts_user_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['UserDetailsRequest'];
				'application/x-www-form-urlencoded': components['schemas']['UserDetailsRequest'];
				'multipart/form-data': components['schemas']['UserDetailsRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDetails'];
				};
			};
		};
	};
	accounts_user_partial_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				'application/json': components['schemas']['PatchedUserDetailsRequest'];
				'application/x-www-form-urlencoded': components['schemas']['PatchedUserDetailsRequest'];
				'multipart/form-data': components['schemas']['PatchedUserDetailsRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['UserDetails'];
				};
			};
		};
	};
	accounts_verify_email_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['VerifyEmailRequest'];
				'application/x-www-form-urlencoded': components['schemas']['VerifyEmailRequest'];
				'multipart/form-data': components['schemas']['VerifyEmailRequest'];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['RestAuthDetail'];
				};
			};
		};
	};
	'Auth Check': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Authenticated. */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Not authenticated. */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	'Health Check': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description No response body */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
