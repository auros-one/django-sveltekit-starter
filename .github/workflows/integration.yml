name: Integration Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Also run when both backend and frontend are affected
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start services
      run: |
        docker compose build
        docker compose up -d

    - name: Wait for backend to be healthy
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8000/api/health/ 2>/dev/null; do
          echo "Waiting for backend..."
          sleep 2
        done'
        echo "Backend is healthy!"

    - name: Wait for frontend to be healthy
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:5173/ 2>/dev/null; do
          echo "Waiting for frontend..."
          sleep 2
        done'
        echo "Frontend is healthy!"

    - name: Run backend health checks
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/api/ || exit 1
        curl -f http://localhost:8000/api/docs/ || exit 1

        # Test Django admin (should redirect to login)
        curl -f http://localhost:8000/aoi/admin/ || curl -I http://localhost:8000/aoi/admin/ | grep -q "302\|200"

    - name: Run frontend health checks
      run: |
        # Test frontend loads
        curl -f http://localhost:5173/ || exit 1

        # Test that frontend can reach backend API
        docker compose exec -T frontend curl -f http://backend:8000/api/ || exit 1

    - name: Test type synchronization
      run: |
        # Install dependencies and sync types
        cd frontend && npm ci
        npm run sync-types

        # Check if types file exists and is valid
        test -f src/lib/api/backend-api-schema.d.ts || exit 1
        echo "Type synchronization successful!"

    - name: Run integration test suite
      run: |
        # Run any integration tests you have
        # For now, just verify services can communicate
        echo "Running integration tests..."

        # Test database connection through backend
        docker compose exec -T backend poetry run python manage.py check --database default

        # Test frontend build with synced types
        docker compose exec -T frontend npm run build

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Backend logs ==="
        docker compose logs backend
        echo "=== Frontend logs ==="
        docker compose logs frontend
        echo "=== Database logs ==="
        docker compose logs db

    - name: Stop services
      if: always()
      run: docker compose down -v

  docker-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build ${{ matrix.service }} Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/docker/Dockerfile
        push: false
        tags: django-sveltekit-${{ matrix.service }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
