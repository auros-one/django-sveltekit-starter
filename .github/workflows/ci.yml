name: CI
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pipenv
          python-version: "3.10"
      - name: Install Pipenv
        run: pip install pipenv
      - name: Install dependencies
        run: python -m pipenv install --dev --deploy

  lint:
    # Dependencies are required for some linters.
    needs: [dependencies]
    uses: ./.github/workflows/lint-python.yml
    with:
      mypy-dot-env: .env.example
      mypy-system-dependencies: libproj-dev gdal-bin

  test:
    needs: [dependencies]
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: project_name
          POSTGRES_PASSWORD: project_name
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - type=tmpfs,destination=/var/lib/postgresql/data
    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install --no-install-recommends libproj-dev gdal-bin
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pipenv
          python-version: "3.10"
      - name: Install Pipenv
        run: pip install pipenv
      - name: Set up environment
        run: cp .env.example .env
      - name: Check for missing migrations
        run: pipenv run python manage.py makemigrations --check --dry-run
      - name: Run system checks
        run: pipenv run python manage.py check
      - name: Run pytest
        uses: liskin/gh-problem-matcher-wrap@v1
        env:
          ENVIRONMENT: ci
          POSTGRES_HOST: localhost
        with:
          linters: pytest
          run: pipenv run python -m pytest --create-db --cov-fail-under 0

  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch'
      || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    env:
      DOCKER_BUILDKIT: 1
    steps:

      - uses: actions/checkout@v3

      - name: Install sentry-cli
        run: curl -sL https://sentry.io/get-cli/ | bash

      - name: Configure sentry-cli
        run: |
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
          echo "SENTRY_ORG=${{ secrets.SENTRY_ORG }}" >> .env
          echo "SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}" >> .env
          echo "VERSION=$(sentry-cli releases propose-version)" >> $GITHUB_ENV

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON }}

      - name: Get Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy ${{ secrets.GCP_PROJECT }}:${{ secrets.GCP_REGION }}:${{ secrets.DB_INSTANCE_NAME }} --gcloud-auth -dir /cloudsql

      - name: Get production config
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@v1
        with:
          secrets: |-
            production_env:${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_ENV_NAME }}

      - name: Authorize Docker push
        run: gcloud auth configure-docker europe-north1-docker.pkg.dev

      - name: Prepare Sentry release
        run: sentry-cli releases new "$VERSION"

      - name: Build builder image
        run: >-
          docker build
          --build-arg BUILDKIT_INLINE_CACHE=1
          -f Dockerfile
          --secret id=GOOGLE_APPLICATION_CREDENTIALS,src=${GOOGLE_APPLICATION_CREDENTIALS}
          --cache-from europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/builder:latest
          -t europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/builder:latest
          --target builder
          .

      - name: Build runtime image
        run: >-
          docker build
          --build-arg COLLECT_STATIC=1
          --build-arg BUILDKIT_INLINE_CACHE=1
          -f Dockerfile
          --cache-from europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/runtime:latest
          -t europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/runtime:${{ github.sha }}
          -t europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/runtime:latest
          .

      - name: Set up production config
        run: |-
          echo '${{ steps.secrets.outputs.production_env }}' > production.env

      - name: Run deployment system checks
        run: >-
          docker run
          --env-file production.env
          --rm europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.REPO_NAME }}/$${{ secrets.PROJECT_SLUG }}:${{ github.sha }}
          manage.py check --deploy --fail-level WARNING

      - name: Push builder image to Artifact Registry
        run: docker push --all-tags europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.PROJECT_SLUG }}/${{ secrets.PROJECT_SLUG }}-builder

      - name: Push runtime image to Artifact Registry
        run: docker push --all-tags europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.PROJECT_SLUG }}/${{ secrets.PROJECT_SLUG }}

      - name: Run database migrations
        run: >-
          docker run
          --env-file production.env
          --rm europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.PROJECT_SLUG }}/${{ secrets.PROJECT_SLUG }}:${{ github.sha }}
          manage.py migrate --noinput

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: common-data
          image: europe-north1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ secrets.PROJECT_SLUG }}/${{ secrets.PROJECT_SLUG }}:${{ github.sha }}
          region: europe-north1

      - name: Finalise Sentry release
        run: sentry-cli releases finalize "$VERSION"
