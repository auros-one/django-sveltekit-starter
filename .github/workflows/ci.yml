name: CI
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name != 'push' || !contains(github.ref, 'main') }}

jobs:
  backend-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
      - name: Install dependencies
        working-directory: backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-root

  frontend-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: frontend/package-lock.json
          node-version: 22
      - name: Install dependencies
        working-directory: frontend
        run: npm install

  backend-lint:
    needs: [backend-dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
      - name: Install dependencies
        working-directory: backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-root
      - name: Run linters
        working-directory: backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run black --check .
          poetry run isort --check-only .

  frontend-lint:
    needs: [frontend-dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: frontend/package-lock.json
          node-version: 22
      - name: Install dependencies
        working-directory: frontend
        run: npm install
      - name: Run linters
        working-directory: frontend
        run: npm run lint

  frontend-check:
    needs: [frontend-dependencies]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: frontend/package-lock.json
          node-version: 22
      - name: Install dependencies
        working-directory: frontend
        run: npm install
      - name: Copy .env.example to .env
        working-directory: frontend
        run: cp .env.example .env
      - name: Run svelte-check
        working-directory: frontend
        run: npm run check

  backend-test:
    needs: [backend-dependencies]
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: project_name
          POSTGRES_PASSWORD: project_name
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - type=tmpfs,destination=/var/lib/postgresql/data
    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install --no-install-recommends libproj-dev gdal-bin
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
      - name: Set up environment
        working-directory: backend
        run: cp .env.ci .env
      - name: Install dependencies
        working-directory: backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-root
      - name: Check for missing migrations
        working-directory: backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run python manage.py makemigrations --check --dry-run
      - name: Run system checks
        working-directory: backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run python manage.py check
      - name: Run pytest
        uses: liskin/gh-problem-matcher-wrap@v1
        env:
          ENVIRONMENT: ci
          POSTGRES_HOST: localhost
          PATH: /home/runner/.local/bin:/usr/local/bin:/usr/bin:/bin
        with:
          linters: pytest
          run: cd backend && poetry run python -m pytest --create-db
