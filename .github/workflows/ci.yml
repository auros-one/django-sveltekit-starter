name: CI
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pipenv
          python-version: "3.11"
      - name: Install Pipenv
        run: pip install pipenv
      - name: Install dependencies
        run: python -m pipenv install --dev --deploy

  lint:
    # Dependencies are required for some linters.
    needs: [dependencies]
    uses: ./.github/workflows/lint-python.yml

  test:
    needs: [dependencies]
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: project_name
          POSTGRES_PASSWORD: project_name
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        volumes:
          - type=tmpfs,destination=/var/lib/postgresql/data
    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get -y install --no-install-recommends libproj-dev gdal-bin
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pipenv
          python-version: "3.11"
      - name: Install Pipenv
        run: pip install pipenv
      - name: Set up environment
        run: cp .env.ci .env
      - name: Check for missing migrations
        run: pipenv run python manage.py makemigrations --check --dry-run
      - name: Run system checks
        run: pipenv run python manage.py check
      - name: Run pytest
        uses: liskin/gh-problem-matcher-wrap@v1
        env:
          ENVIRONMENT: ci
          POSTGRES_HOST: localhost
        with:
          linters: pytest
          run: pipenv run python -m pytest --create-db

# deploy:
#   needs: [dependencies, lint, test]
#   runs-on: ubuntu-latest
#   if: |
#     github.event_name == 'workflow_dispatch'
#     || (github.event_name == 'push' && github.ref == 'refs/heads/main')
#   env:
#     DOCKER_BUILDKIT: 1
#   steps:
#     - uses: actions/checkout@v4
#     - name: Authenticate with Google Cloud
#       uses: google-github-actions/auth@v1
#       with:
#         credentials_json: ${{ secrets.GOOGLE_AUTHENTICATION_CREDENTIALS_JSON }}
#     - name: Authorize Docker push
#       run: gcloud auth configure-docker europe-north1-docker.pkg.dev

#     # Docker builder image
#     - name: Build Builder with Cache
#       id: build-with-cache
#       continue-on-error: true
#       run: >-
#         docker build
#         --build-arg BUILDKIT_INLINE_CACHE=1
#         -f docker/Dockerfile
#         --cache-from ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}-builder:latest
#         -t ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}-builder:latest
#         --target builder
#         .

#     - name: Build Builder with Cache failed -> Build Builder without Cache
#       if: ${{ steps.build-with-cache.outcome == 'failure' }}
#       run: >-
#         docker build
#         -f docker/Dockerfile
#         -t ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}-builder:latest
#         --target builder
#         .

#     # Docker runtime image
#     - name: Build Runtime with Cache
#       id: build-runtime-with-cache
#       continue-on-error: true
#       run: >-
#         docker build
#         --build-arg COLLECT_STATIC=1
#         --build-arg BUILDKIT_INLINE_CACHE=1
#         -f docker/Dockerfile
#         --cache-from ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:latest
#         -t ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:${{ github.sha }}
#         -t ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:latest
#         .

#     - name: Build Runtime with Cache failed -> Build Runtime without Cache
#       if: ${{ steps.build-runtime-with-cache.outcome == 'failure' }}
#       run: >-
#         docker build
#         --build-arg COLLECT_STATIC=1
#         -f docker/Dockerfile
#         -t ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:${{ github.sha }}
#         -t ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:latest
#         .


#     - name: Run deployment system checks
#       run: >-
#         docker run
#         --env SKIP_MIGRATIONS=true
#         --env-file .env.ci
#         --rm ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:${{ github.sha }}
#         python manage.py check --deploy --fail-level WARNING
#     - name: Push builder image to Artifact Registry
#       run: docker push --all-tags ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}-builder
#     - name: Push runtime image to Artifact Registry
#       run: docker push --all-tags ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}
#     - name: Deploy to Cloud Run
#       uses: google-github-actions/deploy-cloudrun@v1
#       with:
#         service: ${{ secrets.CLOUD_RUN_NAME }}
#         image: ${{ secrets.RUNTIME_DOCKERIMAGE_URL }}:${{ github.sha }}
#         region: europe-north1
