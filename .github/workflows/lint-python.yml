name: Python linting
on:
  workflow_call:
    secrets:
      DEPENDENCY_SSH_KEY:
        description: SSH key to use when installing with pipenv for private dependencies.
        required: false
    inputs:
      black:
        default: true
        description: Run black
        required: false
        type: boolean
      django-upgrade:
        default: true
        description: Run django-upgrade
        required: false
        type: boolean
      flake8:
        default: true
        description: Run flake8
        required: false
        type: boolean
      isort:
        default: false
        description: Run isort
        required: false
        type: boolean
      pyright:
        default: true
        description: Run pyright
        required: false
        type: boolean
      pyupgrade:
        default: true
        description: Run pyupgrade
        required: false
        type: boolean
      reorder-python-imports:
        default: true
        description: Run reorder-python-imports
        required: false
        type: boolean
      ruff:
        default: true
        description: Run ruff
        required: false
        type: boolean

      django-version:
        default: "4.2"
        required: false
        type: string
      package-manager:
        default: pipenv
        description: Package manager to use (pip or pipenv)
        required: false
        type: string
      python-version:
        default: "3.11"
        required: false
        type: string
      requirements-files:
        default: requirements.txt
        description: Space-separated list of requirements files if using pip
        required: false
        type: string

jobs:
  black:
    if: inputs.black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable

  flake8:
    if: inputs.flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - run: python -m pip install flake8
      - name: Run flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: python -m flake8

  isort:
    if: inputs.isort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      # Make sure there is some version of isort in case it's not a listed dependency.
      - name: Install isort
        run: pip install isort
      - name: Set pipenv SSH key from secrets
        env:
          DEPENDENCY_SSH_KEY: ${{ secrets.DEPENDENCY_SSH_KEY }}
        if: ${{ env.DEPENDENCY_SSH_KEY != null }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPENDENCY_SSH_KEY }}
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Install pip requirements
        if: inputs.package-manager == 'pip'
        run: pip install -r ${{ inputs.requirements-files }}
      - name: Run isort (pip)
        if: inputs.package-manager == 'pip'
        run: python -m isort --check-only --diff .
      - name: Run isort (pipenv)
        if: inputs.package-manager == 'pipenv'
        run: pipenv run isort --check-only --diff .
      - name: Run isort (pip)
        if: inputs.package-manager == 'pip'
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: python -m isort --check-only --diff .
      - name: Run isort (pipenv)
        if: inputs.package-manager == 'pipenv'
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: pipenv run python -m isort --check-only --diff .

  pyright:
    if: inputs.pyright
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Ensure virtualenv is not created in the project
        run: rm -rf .venv
      - uses: actions/setup-python@v4
        with:
          cache: ${{ inputs.package-manager }}
          python-version: ${{ inputs.python-version }}
      # Make sure there is some version of pyright in case it's not a listed dependency.
      - name: Install pyright
        run: pip install pyright
      - name: Set pipenv SSH key from secrets
        env:
          DEPENDENCY_SSH_KEY: ${{ secrets.DEPENDENCY_SSH_KEY }}
        if: ${{ env.DEPENDENCY_SSH_KEY != null }}
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPENDENCY_SSH_KEY }}
      - name: Install pipenv requirements
        if: inputs.package-manager == 'pipenv'
        run: pip install pipenv && pipenv install --dev
      - name: Install pip requirements
        if: inputs.package-manager == 'pip'
        run: pip install -r ${{ inputs.requirements-files }}
      - name: Run pyright (pip)
        if: inputs.package-manager == 'pip'
        run: python -m pyright
      - name: Run pyright (pipenv)
        if: inputs.package-manager == 'pipenv'
        run: pipenv run python -m pyright

  reorder-python-imports:
    if: inputs.reorder-python-imports
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install reorder-python-imports
        run: pip install reorder-python-imports
      - name: Run reorder-python-imports
        run: git ls-files -- '*.py' | xargs reorder-python-imports --py`echo ${{ inputs.python-version }} | tr -d .`-plus

  ruff:
    if: inputs.ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: chartboost/ruff-action@v1
